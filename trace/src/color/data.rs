use na::{Matrix3, SMatrix};
use once_cell::sync::Lazy;

#[allow(dead_code)]
pub const LINEAR_RGB_TO_XYZ: Matrix3<f32> = Matrix3::new(
    0.4124, 0.3576, 0.1805,
    0.2126, 0.7152, 0.0722,
    0.0193, 0.1192, 0.9505,
);

pub const XYZ_TO_LINEAR_RGB: Matrix3<f32> = Matrix3::new(
     3.2406255, -1.5372080, -0.4986286,
    -0.9689307,  1.8757561,  0.0415175,
     0.0557101, -0.2040211,  1.0569959,
);

pub static CIE_XYZ_1931_2DEG_10NM: Lazy<SMatrix<f32, 41, 3>> = Lazy::new(|| SMatrix::from_row_slice(&[
    0.001368, 0.000039, 0.006450,
    0.004243, 0.000120, 0.020050,
    0.014310, 0.000396, 0.067850,
    0.043510, 0.001210, 0.207400,
    0.134380, 0.004000, 0.645600,
    0.283900, 0.011600, 1.385600,
    0.348280, 0.023000, 1.747060,
    0.336200, 0.038000, 1.772110,
    0.290800, 0.060000, 1.669200,
    0.195360, 0.090980, 1.287640,
    0.095640, 0.139020, 0.812950,
    0.032010, 0.208020, 0.465180,
    0.004900, 0.323000, 0.272000,
    0.009300, 0.503000, 0.158200,
    0.063270, 0.710000, 0.078250,
    0.165500, 0.862000, 0.042160,
    0.290400, 0.954000, 0.020300,
    0.433450, 0.994950, 0.008750,
    0.594500, 0.995000, 0.003900,
    0.762100, 0.952000, 0.002100,
    0.916300, 0.870000, 0.001650,
    1.026300, 0.757000, 0.001100,
    1.062200, 0.631000, 0.000800,
    1.002600, 0.503000, 0.000340,
    0.854450, 0.381000, 0.000190,
    0.642400, 0.265000, 0.000050,
    0.447900, 0.175000, 0.000020,
    0.283500, 0.107000, 0.000000,
    0.164900, 0.061000, 0.000000,
    0.087400, 0.032000, 0.000000,
    0.046770, 0.017000, 0.000000,
    0.022700, 0.008210, 0.000000,
    0.011359, 0.004102, 0.000000,
    0.005790, 0.002091, 0.000000,
    0.002899, 0.001047, 0.000000,
    0.001440, 0.000520, 0.000000,
    0.000690, 0.000249, 0.000000,
    0.000332, 0.000120, 0.000000,
    0.000166, 0.000060, 0.000000,
    0.000083, 0.000030, 0.000000,
    0.000042, 0.000015, 0.000000,
]));

// naive and inaccurate but works for now
pub static RGB_COMPONENTS: Lazy<SMatrix<f32, 41, 3>> = Lazy::new(|| SMatrix::from_row_slice(&[
    0.024756, 0.004191, 0.999531,
    0.024749, 0.004194, 0.999531,
    0.024728, 0.004204, 0.999531,
    0.024659, 0.004240, 0.999529,
    0.024453, 0.004350, 0.999519,
    0.023835, 0.004714, 0.999489,
    0.022449, 0.005786, 0.999404,
    0.020370, 0.008554, 0.999205,
    0.017967, 0.016420, 0.998730,
    0.015609, 0.047531, 0.997352,
    0.013578, 0.241406, 0.991698,
    0.012008, 0.816842, 0.948372,
    0.010924, 0.959789, 0.344638,
    0.010361, 0.985310, 0.034646,
    0.010438, 0.992030, 0.008723,
    0.011397, 0.994114, 0.003910,
    0.013725, 0.994367, 0.002439,
    0.018587, 0.993091, 0.001904,
    0.029041, 0.988836, 0.001768,
    0.054151, 0.974239, 0.001906,
    0.123601, 0.900970, 0.002352,
    0.317213, 0.456809, 0.003297,
    0.627354, 0.096087, 0.005188,
    0.816768, 0.032664, 0.009002,
    0.892390, 0.017290, 0.016610,
    0.923374, 0.011942, 0.030834,
    0.937515, 0.009645, 0.053616,
    0.944346, 0.008565, 0.081918,
    0.947726, 0.008038, 0.108205,
    0.949395, 0.007781, 0.127139,
    0.950229, 0.007653, 0.138931,
    0.950638, 0.007593, 0.145623,
    0.950843, 0.007566, 0.149328,
    0.950952, 0.007552, 0.151492,
    0.951008, 0.007542, 0.152788,
    0.951036, 0.007540, 0.153626,
    0.951048, 0.007541, 0.154261,
    0.951051, 0.007543, 0.154693,
    0.951053, 0.007544, 0.154903,
    0.951055, 0.007540, 0.155054,
    0.951057, 0.007537, 0.155186,
]));

#[cfg(test)]
mod tests {
    use std::ops::Deref;
    use super::*;

    #[test]
    fn test() {
        println!("{}", RGB_COMPONENTS.deref());
        println!("{}", RGB_COMPONENTS.column(0) + RGB_COMPONENTS.column(1) + RGB_COMPONENTS.column(2));
    }
}